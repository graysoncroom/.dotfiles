" STYLE GUIDE: Comments {{{
" One double quote means comments about code.
" Two double quotes mean code commented out.
"
" When possible keep comments on the same line as the code it refers to,
" otherwise put the comment on its own line directly above the code it refers
" to.
"
" Do not expain how a keybinding/function works, explain what it does and why it is useful.
" }}}

" SETUP: first things to run {{{
set nocompatible " This has to be the first line of the file.

" files will be loaded and saved folds upon opening and closing
" keep even if not being used. They were anoying to find.
""autocmd bufwinleave * if expand("%") != "" | mkview | endif
""autocmd bufwinenter * if expand("%") != "" | loadview | endif

" This is install the plugin manager if it is not already installed.
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Sets the cryptmethod to be the strongest encryption supported by the local machine's vim version.
if v:version > 704 || (v:version == 704 && has('patch401'))
	set cryptmethod=blowfish2 
elseif v:version >=703
	set cryptmethod=blowfish
else
	set cryptmethod=zip
endif
" }}}

" PLUGIN: vim-plug plugin list {{{
call plug#begin('~/.vim/plugged')
Plug 'PotatoesMaster/i3-vim-syntax'     " .i3/config file has syntax highlighting
Plug 'christoomey/vim-tmux-navigator'   " allows for tmux panes and vim splits to work together
Plug 'easymotion/vim-easymotion'        " allows for Vimperator style navigation
Plug 'jpalardy/vim-slime'               " Send text to something like tmux, gnu screen, etc.
Plug 'keith/swift.vim'                  " swift source code syntax highlighting
Plug 'rustushki/JavaImp.vim'            " import java classes a lot easier
Plug 'scrooloose/nerdcommenter'         " comment things out much easier
Plug 'scrooloose/nerdtree'              " file system browser
Plug 'tpope/vim-surround'               " extends vocabulary of vim
Plug 'vim-syntastic/syntastic'          " checks and shows error messages for a lot of languages
Plug 'xuhdev/vim-latex-live-preview'    " provides live preview of the output pdf of a latex file
Plug 'tommcdo/vim-exchange'             " Easy word swapping
Plug 'altercation/vim-colors-solarized' " A large collection of colorschemes
Plug 'msanders/cocoa.vim'               " Make it easier to develop Cocoa/Objective-C applications.
Plug 'eraserhd/vim-ios'                 " A plugin for IOS development with vim.
Plug 'ctrlpvim/ctrlp.vim'                   " Full path fuzzy file, buffer, mru, and tags. Finder.
call plug#end()
" }}}

" GENERAL: personal settings {{{
let mapleader="\<Space>"
let localleader="\<Space>"

colorscheme solarized

nnoremap <c-j> <c-w><c-j>
nnoremap <c-k> <c-w><c-k>
nnoremap <c-l> <c-w><c-l>
nnoremap <c-h> <c-w><c-h>
inoremap jk <esc>

set shell=bash                 " Make sure the shell is bash on every system.
set backspace=indent,eol,start " Vim backspace acts like a normal text editor's backspace.
set listchars=tab:>.           " Visual representation of certain characters when list is set.
set viewoptions-=options       " Views will not save keymappings (only preserve buffer folds).
set foldmethod=marker          " Enable folding triggered by markers
set textwidth=100              " Break line at the 100th column.
set undolevels=10000           " Set the number of undo levels vim will record.
set bg=dark                    " Can either be dark or light.
set encoding=utf-8             " Unicode support (just to make sure).
set splitbelow                 " More natural split opening (open split down when applicable).
set splitright                 " More natural split opening (open split to the right when applicable).
set incsearch                  " Search for patterns as you type them in
set nohlsearch                 " Do not highlight patterns after enter key is pressed on search.
set copyindent                 " Use same pattern as the rest of file when auto indenting.
set preserveindent             " Use same pattern as the rest of file when shifting current line over.
set shiftwidth=4               " Affects how automatic indentation works as well as indent shifting.
set tabstop=4                  " Number of visual spaces per <Tab>.
set number                     " Show line numbers in the gutter.
set relativenumber             " Show line number relative to current line in the gutter.
set autoindent                 " Enable automatic indentation.
set smartindent                " Enable c-style indentation (not sure how this is any different from auto indent).
set expandtab                  " Replace tabs with spaces.
set t_Co=256                   " Enable 256-color mode.
set nolist                     " Disable the listing of invisible characters (personal preference).
set wildmenu                   " Will display menu of completions in command mode when <tab> is clicked.
set colorcolumn=+1

" spell check toggle
nnoremap <localleader><localleader>S :setlocal spell! spelllang=en_us<CR>
" }}}

" PLUGIN: javaimp {{{
let g:JavaImpPaths = $HOME . "/.java-source/"
let g:JavaImpDataDir = $HOME . "/.vim/JavaImp"

	" LANG: java {{{
	" Import the Class under cursor.
	autocmd filetype java nnoremap <leader><leader>ii :JavaImpSilent<CR>
	" Open the java source code file in a new buffer, put the cursor on the first line of class
	" definition, and move current line to the top of the screen.
	autocmd filetype java nnoremap <leader><leader>iv :JavaImpFile<CR>gg/interface\ <C-r>=expand("%:t:r")<CR>\\|class\ <C-r>=expand("%:t:r")<CR><CR>zt
	" Same as above only instead of opening a new buffer it opens a split.
	autocmd filetype java nnoremap <leader><leader>is :JavaImpFileSplit<CR>gg/interface\ <C-r>=expand("%:t:r")<CR>\\|class\ <C-r>=expand("%:t:r")<CR><CR>zt
	" }}}
	
" }}}

" PLUGIN: syntastic {{{
""let g:syntastic_always_populate_loc_list = 1
""let g:syntastic_auto_loc_list = 1
""let g:syntastic_check_on_open = 1
""let g:syntastic_check_on_wq = 0
""set statusline+=%#warningmsg#
""set statusline+=%{SyntasticStatuslineFlag()}
""set statusline+=%*
" }}}

" PLUGIN: airline {{{
""let g:airline#extensions#tabline#enabled = 1
" }}}

" PLUGIN: vim-gitgutter {{{
""let g:gitgutter_override_sign_column_highlight = 0
""highlight SignColumn ctermbg=000
" }}}

" PLUGIN: vim-slime {{{
let g:slime_target="tmux" " defaults to tmux for pushing text to next window ( <C-c> <C-c> )
" }}}

" PLUGIN: nerdtree {{{
let g:NERDTreeDirArrowExpandable = '+'
let g:NERDTreeDirArrowCollapsible = '~'

nnoremap <leader>h :NERDTreeToggle<cr>
" }}}

" PLUGIN: nerdcommenter {{{
let g:NERDSpaceDelims = 1
let g:NERDCommentEmptyLines = 1
let g:NERDTrimTrailingWhitespace = 1
" }}}

" PLUGIN: vim-tmux-navigator {{{
let g:tmux_navigator_save_on_switch = 2
" }}}

" PLUGIN: vim-latex-live-preview {{{
let g:livepreview_previewer = 'zathura'

	" LANG: tex {{{
	autocmd Filetype tex setl updatetime=1000
	autocmd Filetype tex nnoremap <leader><leader>T :LLPStartPreview<CR>
	" }}}

" }}}

" LANG: lisp {{{
autocmd filetype lisp set shiftwidth=2
autocmd filetype lisp set tabstop=2
autocmd filetype lisp set expandtab
" }}}

" LANG: html {{{
autocmd filetype html set wrap
autocmd filetype html nnoremap j gj
autocmd filetype html nnoremap k gk
autocmd filetype html nnoremap gj j
autocmd filetype html nnoremap gk k
" }}}

" LANG: tex {{{
autocmd filetype tex set wrap
autocmd filetype tex nnoremap j gj
autocmd filetype tex nnoremap k gk
autocmd filetype tex nnoremap gj j
autocmd filetype tex nnoremap gk k
" }}}
