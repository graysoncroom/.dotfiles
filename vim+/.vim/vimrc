set nocompatible

" This will install the plugin manager if it is not already installed.
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

Plug 'christoomey/vim-tmux-navigator'  
Plug 'vim-airline/vim-airline'
Plug 'drewtempelmeyer/palenight.vim'    
Plug 'rakr/vim-one'
Plug 'RRethy/vim-hexokinase', {'do': 'make hexokinase'}
Plug 'humanoid-colors/vim-humanoid-colorscheme'

" Requires code-minimap to work
Plug 'wfxr/minimap.vim'

call plug#end()

let mapleader="\<Space>"
let maplocalleader="\<Space>"

let g:palenight_terminal_italics=1
let g:one_allow_italics=1
let g:airline_theme='one'
let g:minimap_auto_start=0
let g:tmux_navigator_save_on_switch=2
let g:livepreview_previewer='zathura'
let g:Hexokinase_highlighters=['backgroundfull']

" ==== True Color ====
let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
set t_Co=256
set termguicolors
if &term =~ '256color'
    set t_ut=
endif

if has("termguicolors")
    colorscheme one
else
    colorscheme palenight
endif

highlight Normal guibg=NONE ctermbg=NONE

filetype plugin indent on

nnoremap Y y$

nnoremap <localleader>v :vsplit<CR>
nnoremap <localleader>s :split<CR>
nnoremap <localleader>m :MinimapToggle<CR>
nnoremap <localleader>c :HexokinaseToggle<CR>

" ==== General ====
set shell=bash
set background=dark
set listchars=tab:>.  " Visual representation of certain characters when list is set.
set list              " listing of invisible characters (personal preference).
set undolevels=100000 " Set the number of undo levels vim will record.
set encoding=utf-8    " File encoding will be in unicode.
set ttimeoutlen=0     " key code delay (see timeoutlen for mapping delays)
set cursorline        " highlight line cursor is on

" ==== Line Numbers ====
set number         " Show line numbers in the gutter.
set relativenumber " Show how many lines each line is away from the current line

" ==== Default Indentation ====
set autoindent   " Enable automatic indentation.
set shiftwidth=4 " Used by >>, <<, and ==. Also affects how auto-indentation works.
set tabstop=4    " Changes the width of the tab character.
set expandtab    " Replace tabs with spaces. Comment this line out to use hard tabs.

" ==== Folding ====
set foldenable
set foldmethod=marker

" ==== File Specific Indentation ====
autocmd filetype lisp set shiftwidth=2
autocmd filetype lisp set tabstop=2
autocmd filetype lisp set expandtab

autocmd filetype c set tabstop=4
autocmd filetype c set noexpandtab

" ==== Boilerplates ====
autocmd filetype java nnoremap <localleader>b gg:r ~/.vim/boilerplates/java<CR>ggdd:s/NAME/<C-r>=expand("%:r")<CR><CR>2Go
autocmd filetype c    nnoremap <localleader>b gg:r ~/.vim/boilerplates/c<CR>ggdd/{<CR>o
autocmd filetype html nnoremap <localleader>b gg:r ~/.vim/boilerplates/html<CR>ggdd/<title><CR>f>a<C-r>=expand("%:r")<CR><esc>/<body><CR>o

" Corporate Comment Boilerplate
nnoremap <localleader>* mp:r ~/.vim/boilerplates/comment<cr>'pdd=5j/DATE<cr>dawk:r! date +\%m/\%d/\%Y<cr>J==i* <esc>2Wi  <esc>?Description<cr>nciw

" ==== Status Line ==== {{{
"set laststatus=2
"set statusline=
"set statusline+=%2*
"set statusline+=%{StatuslineMode()}
"set statusline+=%1*
"set statusline+=\ 
"set statusline+=<
"set statusline+=<
"set statusline+=\ 
"set statusline+=%f
"set statusline+=\ 
"set statusline+=>
"set statusline+=>
"set statusline+=%=
"set statusline+=%m
"set statusline+=%h
"set statusline+=%r
"set statusline+=\ 
"set statusline+=%3*
"set statusline+=%{b:gitbranch}
"set statusline+=%1*
"set statusline+=\ 
"set statusline+=%4*
"set statusline+=%F
"set statusline+=:
"set statusline+=:
"set statusline+=%5*
"set statusline+=%l
"set statusline+=/
"set statusline+=%L
"set statusline+=%1*
"set statusline+=|
"set statusline+=%y
"hi User2 ctermbg=lightgreen ctermfg=black guibg=lightgreen guifg=black
"hi User1 ctermbg=black ctermfg=white guibg=black guifg=white
"hi User3 ctermbg=black ctermfg=lightblue guibg=black guifg=lightblue
"hi User4 ctermbg=black ctermfg=lightgreen guibg=black guifg=lightgreen
"hi User5 ctermbg=black ctermfg=magenta guibg=black guifg=magenta
"
"function! StatuslineMode()
"    let l:mode=mode()
"    if l:mode==#"n"
"        return "NORMAL"
"    elseif l:mode==?"v"
"        return "VISUAL"
"    elseif l:mode==#"i"
"        return "INSERT"
"    elseif l:mode==#"R"
"        return "REPLACE"
"    elseif l:mode==?"s"
"        return "SELECT"
"    elseif l:mode==#"t"
"        return "TERMINAL"
"    elseif l:mode==#"c"
"        return "COMMAND"
"    elseif l:mode==#"!"
"        return "SHELL"
"    endif
"endfunction
"
"function! StatuslineGitBranch()
"    let b:gitbranch=""
"    if &modifiable
"        try
"            let l:dir=expand('%:p:h')
"            let l:gitrevparse = system("git -C ".l:dir." rev-parse --abbrev-ref HEAD")
"            if !v:shell_error
"                let b:gitbranch="(".substitute(l:gitrevparse, '\n', '', 'g').") "
"            endif
"        catch
"        endtry
"    endif
"endfunction
"
"augroup GetGitBranch
"    autocmd!
"    autocmd VimEnter,WinEnter,BufEnter * call StatuslineGitBranch()
"augroup END
" }}}

" vim:foldmethod=marker:foldlevel=0
