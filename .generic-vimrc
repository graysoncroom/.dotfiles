" syntastic errors apear in seperate window at bottom of current window
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

set backspace=indent,eol,start
set laststatus=2          " status line is always at the bottom of the screen
set bg=light              " with a black terminal light syntax looks much better
set encoding=utf-8        " unicode support ( just to make sure )
set splitbelow            " more natural split opening ( open split down when applicable )
set splitright            " more natural split opening ( open split to the right when applicable )
set listchars=tab:>.      " visual representation of certain characters when list is set
set incsearch             " search for patterns as you type them in
set nohlsearch            " do not hightlight patterns after enter key is pressed on search
set copyindent            " use same pattern as the rest of file when autoindenting
set preserveindent        " use same pattern as the rest of file when shifting current line over
set shiftwidth=4          " affects how automatic indentation works as well as indent shifting
set tabstop=4             " number of visual spaces per <Tab>
set number                " show line numbers
set relativenumber        " show number of lines away each line is from current line
set autoindent            " enable automatic indentation
set smartindent           " enable c-style indentation ( not sure how this is any different from autoindent tbh )
set nowrap                " no line wrapping ( personal preference )
set t_Co=256              " enable 256-color mode
set nolist                " disable the listing of invisible characters (personal preference)
set wildmenu              " will display menu of completions in command mode when <tab> is clicked
set viewoptions-=options  " views will not save keymappings ( only preserve buffer folds )
syntax enable             " enable syntax highlighting

" PLUGIN: JavaImp
let g:JavaImpPaths = $HOME . "/.generic-vim-javaImp/jdk-source/"
let g:JavaImpDataDir = $HOME . "/.generic-vim-javaImp/JavaImp"

" PLUGIN: Syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" PLUGIN: vim-slime
let g:slime_target="tmux" " defaults to tmux for pushing text to next window ( <C-c> <C-c> )

let mapleader=" "         " changing <leader> to space
let localleader=" "       " change <localleader> to space

" Lisp is a rare case where I prefer to use spaces over tabs.
" I like to follow conventions in lisp due to the esoteric nature of differing
" indentation styles
autocmd FileType lisp set shiftwidth=2
autocmd FileType lisp set tabstop=2
autocmd FileType lisp set expandtab

" easier to switch between vim windows
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

autocmd FileType html nnoremap j gj
autocmd FileType html nnoremap k gk

" I am super lazy...
inoremap jk <esc>

" files will be loaded and saved folds apon opening and closing, respectively
autocmd BufWinLeave * if expand("%") != "" | mkview | endif
autocmd BufWinEnter * if expand("%") != "" | loadview | endif

" insert a character at current location, pushing character under cursor to
" the right
nnoremap <leader>i i_<Esc>r

" the opposite of the J{oin} command
nnoremap <leader>J mpi<Cr><Esc>`p

" I use ex mode a lot more than the repeat command
nnoremap ; :
nnoremap : ;

" opens nerdtree
nnoremap <leader>h :NERDTreeToggle<cr>

if has("unix")
	let s:uname = system("uname -s")
	if s:uname == "Darwin"
		let g:xcode_default_simulator = 'iPhone 5'
		set secure " don't let external configs do scary shit
		set exrc   " load local vimrc if found
	endif
endif
