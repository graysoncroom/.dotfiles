(#<V-FUNCTION - :V! NIL -> #<V-VEC2 {1004A242C3}>> #<FLOW-IDENTIFIER :ids (0)>
          #<FLOW-IDENTIFIER :ids (1)>)

(#<V-FUNCTION - :%< NIL -> #<V-BOOL {1004A2FEB3}>> #<FLOW-IDENTIFIER :ids (0)>
          #<FLOW-IDENTIFIER :ids (3)>)

(#<V-FUNCTION - :%+ NIL -> NIL> #<FLOW-IDENTIFIER :ids (5)>
          #<FLOW-IDENTIFIER :ids (6)>)

(#<V-FUNCTION - :%+ NIL -> NIL> #<FLOW-IDENTIFIER :ids (8)>
          #<FLOW-IDENTIFIER :ids (9)>)

(#<V-FUNCTION - :V! NIL -> #<V-VEC4 {1004A6D223}>>
          #<FLOW-IDENTIFIER :ids (0 1 7)> #<FLOW-IDENTIFIER :ids (1 7 10)>
          #<FLOW-IDENTIFIER :ids (11)> #<FLOW-IDENTIFIER :ids (12)>)


(defmacro jam ()
`(ham 1))

(let ((jam))
ham)

(defmacro in (space &body body) `(list ',space ',body))



(defun-g testing ((vert g-pnt) &uniform (ws space))
(let ((p (p! (pos vert))))
(in ws
)))


(defpipeline blah (g-> #'v #'testing))
