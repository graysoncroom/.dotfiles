set nocompatible " vim doesn't have to act like vi

" ====================================== 
" |----- Start of Vim Plugin List -----|
" ======================================
filetype off                      " ( required by vundle )
set rtp+=~/.vim/bundle/Vundle.vim " ( required by vundle )
call vundle#begin()

" let vundle manage itself
Plugin 'VundleVim/Vundle.vim'

" syntax coloring and indention for Swift
Plugin 'keith/swift.vim'

" linter
Plugin 'vim-syntastic/syntastic'

" nerdtree
Plugin 'scrooloose/nerdtree.git'

" imports in java
Plugin 'rustushki/JavaImp.vim'

call vundle#end()
filetype plugin indent on " ( required by vundle )
" ======================================
" |------ End of Vim Plugin List ------|
" ======================================

set incsearch            " search for patterns as you type them in
set copyindent           " use same pattern as the rest of file when autoindenting
set preserveindent       " use same pattern as the rest of file when shifting current line over ( >> , << , == )
set shiftwidth=4         " affects how automatic indentation works as well as indent shifting ( >> , << , == )
set tabstop=4            " number of visual spaces per <Tab>
set smarttab             " use hard tabs for indenting and spaces for alignment
set number               " show line numbers
set relativenumber       " show number of lines away each line is from current line
set autoindent           " enable automatic indentation
set t_Co=256             " enable 256-color mode
set nolist               " disable the listing of invisible characters (personal preference)
set wildmenu             " will display menu of completions in command mode when <tab> is clicked
set viewoptions-=options " views will not save keymappings ( only preserve buffer folds )
let mapleader=" "        " changing <leader> to space
let localleader=" "      " change <localleader> to space
syntax enable            " enable syntax highlighting

" setting the encrypt method to be the strongest the machine has available
" when writing to encrypted file the following tags indicate the cryptmethod
" being used:
" [crypted]   == zip method
" [blowfish]  == blowfish method
" [blowfish2] == blowfish2 method
if v:version > 704 || (v:version == 704 && has('patch401'))
	set cryptmethod=blowfish2 "medium-strong
elseif v:version >=703
	set cryptmethod=blowfish  "medium with flaws
else
	set cryptmethod=zip       "weak with backwards compatiblity
endif

" force user to not navigate via the arrow keys while in normal mode
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>

" force user to not navigate via the arrow keys while in insert mode
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" allows for easy navigation through long wraped lines
" this is make relativenumber display incorrect line numbers in some cases
""nnoremap j gj
""nnoremap k gk

" class comment template
"" nnoremap <leader>// :read $HOME/.vim/boilerplates/comment<cr>kdd<cr>

" allows for quick editing/reloading of vimrc
nnoremap <leader>en :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" bind jk to <esc>
inoremap jk <esc>

" force user not to use to <esc> key (use jk)
inoremap <esc> <nop>

" tp stands for 'template'
" the following are templates for a couple of languages
autocmd FileType java nnoremap <leader>tp :read $HOME/.vim/boilerplates/java<cr>kdd<cr>/{<cr>:nohl<cr>o
autocmd FileType html nnoremap <leader>tp :read $HOME/.vim/boilerplates/html<cr>kkd<cr>/title<cr>:nohl<cr>f>a
autocmd FileType c    nnoremap <leader>tp :read $HOME/.vim/boilerplates/c<cr>kdd<cr>/{<cr>:nohl<cr>o

" loads and saves folds apon starting and closing, respectively
autocmd BufWinLeave * if expand("%") != "" | mkview | endif
autocmd BufWinEnter * if expand("%") != "" | loadview | endif

" compile code in a couple compiled languages
autocmd FileType java  nnoremap <leader>c :execute "!clear;javac " . expand("%")<cr>
autocmd FileType c     nnoremap <leader>c :execute "!clear;gcc -o " . expand("%:r") . " " . expand("%")<cr>
autocmd FileType swift nnoremap <leader>c :execute "!clear;cd ..;xcodebuild;cd -"<cr>

" run code in a couple compiled languages
autocmd FileType java nnoremap <leader>r :execute "!clear;java " . expand("%:r")<cr>
autocmd FileType c    nnoremap <leader>r :execute "!clear;./" . expand("%:r")<cr>

" run code in scripting languages
autocmd FileType sh,bash nnoremap <leader>r :execute "clear;!./" .expand("%")<cr>
autocmd FileType js      nnoremap <leader>r :execute "clear;!./" .expand("%")<cr>

" git add the current file
nnoremap <leader>ga :execute "!clear;git add " . expand("%")<cr>

" git commit the added files ( will prompt for commit message )
nnoremap <leader>gc :execute "!clear;git commit"<cr>

" git push the commited files
nnoremap <leader>gp :execute "!clear;git push"<cr>

" git status
nnoremap <leader>gs :execute "!clear;git status"<cr>

" surround word with double quote command
nnoremap <leader>" mabi"<esc>ea"<esc>`a

" surround word with a double quote
nnoremap <leader>' mabi'<esc>ea'<esc>`a

" comment out current line
autocmd FileType java nnoremap <leader>/ maI//<esc>`a

" import the library/object under cursor
" at the moment this will only work in java
autocmd FileType java nnoremap <leader>i :JI<cr>

" open nerdtree
nnoremap <leader>tt :NERDTreeToggle<cr>

if has("unix")
	let s:uname = system("uname -s")
	if s:uname == "Darwin"
		let g:xcode_default_simulator = 'iPhone 5'
		set secure " don't let external configs do scary shit
		set exrc   " load local vimrc if found
	endif
endif

let g:JavaImpPaths   = $HOME . "/.vim/jdk-source/"
let g:JavaImpDataDir = $HOME . "/.vim/JavaImp"
