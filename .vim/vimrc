execute pathogen#infect()

set nocompatible          " vim doesn't have to act like vi
set copyindent            " use same pattern as the rest of file when autoindenting
set preserveindent        " use same pattern as the rest of file when shifting current line over ( >> , << , == )
set shiftwidth=4          " affects how automatic indentation works as well as indent shifting ( >> , << , == )
set tabstop=4             " number of visual spaces per <Tab>
set smarttab              " use hard tabs for indenting and spaces for alignment
set number                " show line numbers
set relativenumber        " show number of lines away each line is from current line
set autoindent            " enable automatic indentation
set t_Co=256              " enable 256-color mode
set nolist                " disable the listing of invisible characters (personal preference)
set wildmenu              " will display menu of completions in command mode when <tab> is clicked
set viewoptions-=options  " views will not save keymappings ( only preserve buffer folds )
let mapleader=" "         " changing <leader> to space
let localleader=" "       " change <localleader> to space
syntax enable             " enable syntax highlighting
filetype plugin indent on " enable filetype detection

" setting the encrypt method to be the strongest the machine has available
" when writing to encrypted file the following tags indicate the cryptmethod
" being used:
" [crypted]   == zip method
" [blowfish]  == blowfish method
" [blowfish2] == blowfish2 method
if v:version > 704 || (v:version == 704 && has('patch401'))
	set cryptmethod=blowfish2 "medium-strong
elseif v:version >=703
	set cryptmethod=blowfish  "medium with flaws
else
	set cryptmethod=zip       "weak with backwards compatiblity
endif

" force user to not navigate via the arrow keys while in normal mode
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>

" force user to not navigate via the arrow keys while in insert mode
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" allows for easy navigation through long wraped lines
nnoremap j gj
nnoremap k gk

" class comment template
nnoremap <leader>// :read $HOME/.vim/boilerplates/comment<cr>kdd<cr>

" allows for quick editing/reloading of vimrc
nnoremap <leader>en :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" tp stands for 'template'
" the following are templates for a couple of languages
autocmd FileType java nnoremap <leader>tp :read $HOME/.vim/boilerplates/java<cr>kdd<cr>/{<cr>:nohl<cr>o
autocmd FileType html nnoremap <leader>tp :read $HOME/.vim/boilerplates/html<cr>kkd<cr>/title<cr>:nohl<cr>f>a
autocmd FileType c    nnoremap <leader>tp :read $HOME/.vim/boilerplates/c<cr>kdd<cr>/{<cr>:nohl<cr>o

" loads and saves folds apon starting and closing, respectively ( if the
autocmd BufWinLeave * if expand("%") != "" | mkview | endif
autocmd BufWinEnter * if expand("%") != "" | loadview | endif


" compile code in a couple languages
autocmd FileType java nnoremap <leader>c :execute "!javac " . expand("%")<cr>
autocmd FileType c    nnoremap <leader>c :execute "!gcc -o " . expand("%:r") . " " . expand("%")<cr>

" run code in a couple languages
autocmd FileType java nnoremap <leader>r :execute "!java " . expand("%:r")<cr>
autocmd FileType c    nnoremap <leader>r :execute "!./" . expand("%:r")<cr>
